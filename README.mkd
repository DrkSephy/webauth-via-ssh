SSH Authentication for Web Services
===================================

Overview
--------

A proof of concept for using ssh public keys to authenticate to web services.
See doc/design-notes.txt for the high-level ideas.

Dependencies
------------

* [OpenSSH]
* [OpenSSL]
* [libwebsockets]

### Optional dependencies

Most any fcgi-capable web-server should do, but there are some config files
and convenience scripts for [nginx] and [spawnfcgi].  Test server needs
[FCGI], and also makes use of a patched sshd, initially created for github:
https://github.com/norbauer/openssh-for-git


Building
--------

    autoconf
	./configure [OPTIONS...]
	make

Note that:
* There's not an install target right now.
* `./configure` has some useful options, e.g. setting the path to
  libwebsockets and the patched version of openssh, neither of which are
  likely to be globally installed on your system.
* The Makefiles in each directory are short, easy to read, and contain options
  for fine-tuning things further.


Running
-------

### Test Server

First start the patched `sshd`.  There is a wrapper script (one-liner to set
options) at `ssh-conf/start-sshd.sh` which is recommended.  Then start nginx
and the fast-cgi server via the script `test-app/startnginx.sh`.  **Note:**
everything has been configured so that root privileges are not required for
either of these scripts, although some features (like logging) will be a
little strange, or possibly absent.  The service should then be running on
port 8080.

### Client

Go to `auth-modules/` and run `./authd`.  **Note:** if you don't have
ssh-agent running with your key, run `./authd --keyfile=<key>` instead.
Assuming you already have the server running on this same machine, you can now
navigate to http://localhost:8080/main.fcgi and you should find the test
application.

### Web Application

The "application" just saves some text data for each user and allows them to
edit it.  Upon first loading the page, an attempt will be made to authenticate
you via your ssh public key.  (**NOTE:** if your public key is unknown to the
server, it will make a new account for you automatically.)  The authentication
cookie obtained via ssh is a session cookie, but also will be rejected after
30 minutes.  So, you won't see ssh in action again unless you wait a while, or
close the browser and come back (or manually delete the cookie).  Anyhow,
**the main point:** this proposal replaces passwords (annoying) with ssh
public key authentication (awesome).


Documentation
-------------

See doc/design-notes.txt.

TODO
----

* Token generating / verifying should be in one module.
* Most errors are handled un-gracefully.


[OpenSSH]: http://www.openssh.com/
[FCGI]: http://www.fastcgi.com/drupal/
[nginx]: http://nginx.org/
[OpenSSL]: http://www.openssl.org/
[libwebsockets]: http://libwebsockets.org/trac/libwebsockets
[spawnfcgi]: http://redmine.lighttpd.net/projects/spawn-fcgi/
